<?php
// $Id$

/**
 * @file
 * Module for retriving information from the World of Warcraft armory.
 * This module provides multible block's and pages for displaying the
 * guild's information.
 * Blocks: Guild Information and Recruitment.
 * Pages: Guild Roster, Charachter Pages and Proffesion Pages.
 */

/**
 * Implementation of hook_help().
 */
function wowguild_help($path, $arg) {
  switch ($path) {
    case 'admin/wowguild/settings':
      $output = 'This module provides a way for an administrator to send'.
          'email to a user. '.
          'It assumes that the Drupal mailer is configured.';
      return '<p>'. t($output) .'</p>';
  }
}

/**
 * Implements hook_perm().
 */
function wowguild_perm() {
  return array(
  'accept applies',
  'delice applies',
  );
}

/**
 * Implementation of hook_init().
 */
function wowguild_init() {
  drupal_add_css(drupal_get_path('module', 'wowguild') .'/wowguild.css');
  drupal_set_html_head('<script src="http://static.wowhead.com/widgets/power.js"></script>');
}

/**
 * Implementation of hook_cron().
 */
function wowguild_cron() {
  $url = wowguild_url(
      array(
      'type' => 'guild-stats',
      )
  );

  $http_result = _wowguild_fetch_armory($url);
  $xml = simplexml_load_string($http_result->data);
  $arr = ($xml->xpath("//character[@rank='0']"));
  $guildleader = $arr[0]['name'];

  db_query(
      "UPDATE {wowguild} SET members=%d, guildLeader='%s'",
      $xml->guildInfo->guildHeader->attributes()->count,
      $guildleader
  );
}

/**
 * Implementation of hook_user().
 */
function wowguild_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'form' && $category == 'account') {
    $form['character_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('In-game character'),
        '#collapsible' => TRUE,
        '#weight' => 4
    );
    $form['character_settings']['main_character'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#default_value' => $edit['main_character'],
        '#size' => 30,
        '#maxlength' => 64,
        '#description' => t('Enter your character&acute;s name.'),
        '#required' => TRUE,
    );
    return $form;
  }
  // IT'S STILL BUGGED AND DOES NOT WORK!
  if ($op == 'validate' && $category == 'account') {
    $members = _wowguild_getmember($edit->main_character);
    //  print_r($account);
    if ($edit->main_character != $members->name) {
      form_set_error('', t("Oops! It seems that there is no character named '$account->main_character' in the guild."));
    }
  }
  // STILL TO FINISH
  if ($op == 'view') {
    $account->content['EmailUsers'] = array(
        '#type' => 'user_profile_category',
        '#attributes' => array('class' => 'user-member'),
        '#weight' => 0,
        '#title' => t('Character information'),
    );
    // Create the content of the block
    $account->content['EmailUsers']['EmailLink'] = array(
        '#type' => 'user_profile_item',
        //'#attributes' => array('class' => 'user-member'),
        '#title' => t('Send a message to this user from the site administrator.'),
        '#value' => l('Email', 'admin/emailusers/compose/'. $account->uid),
    );
  }
}

/**
 * Implementation of hook_block().
 */
function wowguild_block($op='list' , $delta=0, $edit=array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Guild Statistics');
      $blocks[1]['info'] = t('Recruitment');
      return $blocks;
    case 'view': default:
    // The $delta parameter tells us which block is being requested.
      switch ($delta) {
        case 0:
          $blocks['subject'] = t('Guild Statistics');
          $blocks['content'] = _wowguild_block_content();
          break;
        case 1:
          $blocks['subject'] = t('Recruitment');
          $blocks['content'] = _wowguild_block_recruitment();
          break;
      }
      return $blocks;
  }
}

/**
 * Implementation of hook_menu().
 */
function wowguild_menu() {
  $items['admin/guildsettings'] = array(
      'title' => 'Guild settings',
      'description' => 'Adjust configuration options for your guild.',
      'page callback' => 'page_wowguild_setting',
      'access arguments' => array('access content'),
      'access arguments' => array('administer book outlines'),
      'file' => 'wowguild.admin.inc',
  );

  $items['admin/guildsettings/basic'] = array(
      'title' => 'Basic settings',
      'description' => 'Adjust basic guild configuration options.',
      'page callback' => 'page_wowguild_settings',
      'access arguments' => array('access content'),
      'file' => 'wowguild.admin.inc',
  );

  $items['admin/guildsettings/recruitment'] = array(
      'title' => 'Recruitment',
      'description' => 'Control for which classes reqruitment is open for.',
      'page callback' => 'page_wowguild_recruitment',
      'access arguments' => array('access content'),
      'file' => 'wowguild.admin.inc',
  );

  $items['character/%'] = array(
      'title' => 'Character Profile',
      'page callback' => 'page_character_sheet',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'file' => 'wowguild.pages.inc',
  );

  $items['apply'] = array(
      'title' => 'Submit application',
      'page callback' => 'page_wowguild_apply',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'wowguild.pages.inc',
  );

  $items['character'] = array(
      'title' => 'Guild Roster',
      'page callback' => 'page_wowguild_character',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'file' => 'wowguild.pages.inc',
  );

  $items['crafting'] = array(
      'title' => 'Crafting',
      'page callback' => 'page_wowguild_crafting',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      //'type' => MENU_LOCAL_TASK,
      'file' => 'wowguild.pages.inc',
  );

  $items['import/%'] = array(
      'title' => 'Character Import',
      'page callback' => 'page_wowguild_import',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'file' => 'wowguild.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function wowguild_theme() {
  return array(
  'wowguild_sheet' => array(
  'template' => 'wowguild_sheet',
  'arguments' => array(
  'name' => NULL,
  'level' => NULL,
  'genderId' => NULL,
  'classId' => NULL,
  'raceId' => NULL,
  'gender' => NULL,
  'class' => NULL,
  'race' => NULL,
  'achPoints' => NULL,
  'prefix' => NULL,
  'suffix' => NULL
  ),
  ),
  'wowguild_stats' => array(
  'template' => 'wowguild_stats',
  'arguments' => array(
  'name' => NULL,
  'members' => NULL,
  'realm' => NULL,
  'battlegroup' => NULL,
  'faction' => NULL,
  'guildleader' => NULL
  ),
  ),
  'wowguild_recruitment' => array(
  'template' => 'wowguild_recruitment',
  'arguments' => array(
  'array' => NULL
  ),
  ),
  'wowguild_achievement' => array(
  'template' => 'wowguild_achievement',
  'arguments' => array(
  'points' => NULL,
  'date' => NULL,
  'title' => NULL,
  'body' => NULL
  ),
  ),

  'wowguild_roster' => array(
  'template' => 'wowguild_roster',
  'arguments' => array(
  'test' => NULL
  ),
  ),

  );
}

/**
 * Returns the Recruitment block from the theme hook.
 */
function _wowguild_block_recruitment() {
  $data = _wowguild_get();
  $names_arr = wowguild_arr_names();
  $output = theme('wowguild_recruitment',
      $names_arr
  );

  return $output;
}

/**
 * Returns the Guild Information block from the theme hook.
 */
function _wowguild_block_content() {
  $data = _wowguild_get();
  $names_arr = wowguild_arr_names();
  $output = theme('wowguild_stats',
      check_plain($data->name),
      check_plain($data->members),
      check_plain($data->realm),
      check_plain($data->battleGroup),
      check_plain($names_arr['faction'][$data->faction]),
      check_plain($data->guildLeader)
  );

  return $output;
}

/**
 * Returns the data from a given URL.
 */
function _wowguild_fetch_armory($url) {
  $headers = array(
      'User-Agent' => 'User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.11) Gecko/2009060309 Ubuntu/9.04 (jaunty) Firefox/3.0.11'
  );

  return drupal_http_request($url, $headers);
}

/**
 * Returns an object containing the database query from wowguild.
 */
function _wowguild_get() {
  $result = db_query(
      'SELECT name, realm, region, faction, members, battleGroup, guildLeader FROM {wowguild}'
  );

  return db_fetch_object($result);
}

/**
 * Returns an object containing the database query from wowguildmembers.
 */
function _wowguild_getmember($name) {
  $result = db_query(
      //        'SELECT name, level FROM {wowguildmembers}'
      "SELECT * FROM {wowguildmembers} WHERE name='$name'"
  );

  return db_fetch_object($result);
}

/**
 * Returns an object containing the database query from wowguildrecruitment.
 */
function _wowguild_recruitment() {
  $result = db_query(
      //        'SELECT name, level FROM {wowguildmembers}'
      "SELECT * FROM {wowguildrecruitment}"
  );

  return db_fetch_object($result);
}

/**
 * Checks whether $default contains data
 * and returns FALSE if not and TRUE if it found data.
 * @default an variable containing data
 */
function _wowguild_ifcollapsed($default) {
  if ($default == '') {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Builds a link to an Armory page.
 * @vars an array that passas info to make up the link.
 * the array contains: type, subtype, region, realm, name, item, team
 */
function wowguild_url($vars) {
  $guild_data = _wowguild_get();

  $region = _wowguild_ifset($vars['region'], $guild_data->region);
  $realm = _wowguild_ifset($vars['realm'], $guild_data->realm);
  $battlegroup = _wowguild_ifset($vars['battlegroup'], $guild_data->battlegroup);
  $name = _wowguild_ifset($vars['name'], $guild_data->name);

  switch ($vars['type']) {
    case "guild-stats":
    case "character-sheet":
    case "character-talents":
    case "character-reputation":
    case "character-achievements":
    case "character-statistics":
      $output = sprintf("http://%s.wowarmory.com/%s.xml?r=%s&n=%s",
          $region,
          $vars['type'],
          str_replace(" ", "+", $realm),
          str_replace(" ", "+", $name)
      );
      if ($vars['subtype'] == TRUE) {
        $output .= sprintf("&c=%d",
            $vars['subtype']
        );
      }
      break;

    case "character-calendar":
      $output = sprintf("http://%s.wowarmory.com/vault/%s.xml?r=%s&n=%s",
          $region,
          $vars['type'],
          str_replace(" ", "+", $realm),
          str_replace(" ", "+", $name)
      );
      break;

    case "item-info":
      $output = sprintf("http://%s.wowarmory.com/%s.xml?i=%d",
          $region,
          $vars['type'],
          $vars['item']
      );
      break;

    case "team-info":
      $output = sprintf("http://%s.wowarmory.com/%s.xml?b=%s&r=%s&ts=%s",
          $region,
          $vars['type'],
          $battlegroup,
          str_replace(" ", "+", $realm),
          str_replace(" ", "+", $vars['team'])
      );
      break;
  }

  return $output;
}

/**
 * Simple function to determine if $a exists, when it does it returns $a.
 * If $a does not exists it returns $b.
 */
function _wowguild_ifset($a, $b) {
  if ($a == TRUE) {
    return $a;
  }
  else {
    return $b;
  }
}

/**
 * Returns an nested array of names that correpond to their Id's.
 */
function wowguild_arr_names() {
  $output = array(
      "region" => array(
      'www' => t('Americas'),
      'eu' => t('Europa'),
      'kr' => t('Korea'),
      'cn' => t('China'),
      'tw' => t('Taiwan')
      ),
      "recruitment" => array("0" => "Closed", "1" => "Open"),
      "faction" => array("0" => "Alliance", "1" => "Horde"),
      "gender" => array("0" => "Male", "1" => "Female"),
      "race" => array(
      "1" => "Human",
      "2" => "Orc",
      "3" => "Dwarf",
      "4" => "Night Elf",
      "5" => "Undead",
      "6" => "Tauren",
      "7" => "Gnome",
      "8" => "Troll",
      //      "9" => "",
      "10" => "Blood Elf",
      "11" => "Draenei"
      ),
      "class" => array(
      "1" => "Warrior",
      "2" => "Paladin",
      "3" => "Hunter",
      "4" => "Roque",
      "5" => "Priest",
      "6" => "Death Knight",
      "7" => "Shaman",
      "8" => "Mage",
      "9" => "Warlock",
      //      "10" => "",
      "11" => "Druid"
      )
  );

  return $output;
}







/**
 * Provides the wowguild content type.
 * @file
 */

/**
 * Implements hook_node_info()
 */
function wowguild_node_info() {
  return array(
  'wowguild' => array(
  'module' => 'wowguild',
  'name' => t('wowguild'),
  'description' => t("A wowguild of a person."),
  'has_title' => TRUE,
  'title_label' => t('wowguild of'),
  'has_body' => TRUE,
  'body_label' => t('Overview'),
  //'module' => 'wowguild',
  )
  );
}



/**
 * Implements hook_access()
 */
function wowguild_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create wowguild node', $account);
    case 'update':
      return user_access('edit wowguild nodes', $account);
    case 'delete':
      return user_access('delete wowguild nodes', $account);
  }
}

// ======================================
// Database:
// ======================================

/**
 * implements hook_insert()
 */
function wowguild_insert($node) {

  if (!isset($node->life)) $node->life = '';
  if (!isset($node->works)) $node->life = '';

  db_query(
      'INSERT INTO {wowguild} (vid, nid, dates, life, works) '
      ."VALUES (%d, %d, '%s', '%s','%s')",
      $node->vid,
      $node->nid,
      $node->dates,
      $node->life,
      $node->works
  );
}
/**
 * implements hook_update()
 */
function wowguild_update($node) {
  if ($node->revision) { // Node is new or a revision. See node_example.module.
    wowguild_insert($node);
  }
  else {
    db_query("UPDATE {wowguild} SET dates = '%s', life = '%s', works='%s' "
        ."WHERE vid = %d",
        $node->dates,
        $node->life,
        $node->works,
        $node->vid
    );
  }
}
/**
 * implements hook_delete()
 */
function wowguild_delete($node) {
  db_query('DELETE * FROM {wowguild} WHERE nid = %d', $node->nid);
}

/**
 * Implements hook_nodeapi()
 * This handles deleting revisions.
 */
function wowguild_nodeapi(&$node, $op, $teaser, $page) {
  if ($op == 'delete revision')
    db_query('DELETE * FROM {wowguild} WHERE vid = %d', $node->vid);
}

// ======================================
// Creating Data:
// ======================================
/**
 * Implementation of hook_form()
 */
function wowguild_form(&$node) {
  $type = node_get_types('type', $node);

  // Existing files: title (wowguild of) and body (Overview)
  if ($type->has_title) {
    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($type->title_label),
        '#required' => TRUE,
        '#default_value' => $node->title,
        '#weight' => -5
    );
  }

  if ($type->has_body) {
    $form['body_field'] = node_body_field(
        $node,
        $type->body_label,
        $type->min_word_count
    );
  }

  // Our custom fields: Dates, Life, Works.
  // (See FAPI docs for specification)
  $form['dates'] = array(
      '#type' => 'textfield',
      '#size' => 50,
      '#maxlengh' => 127,
      '#title' => t('Dates'),
      '#description' => t("Birth and death dates."),
      '#default_value' => isset($node->dates) ? $node->dates : '',
  );
  $form['life'] = array(
      '#type' => 'textarea',
      '#title' => t('Life'),
      '#cols' => 50,
      '#rows' => 5,
      '#description' => t("A description of this person's life."),
      '#default_value' => isset($node->life) ? $node->life : '',
  );
  $form['works'] = array(
      '#type' => 'textarea',
      '#title' => t('Works'),
      '#cols' => 50,
      '#rows' => 5,
      '#description' => t("An annotated bibliography of this person's works."),
      '#default_value' => isset($node->works) ? $node->works : '',
  );

  return $form;
}

// ======================================
// Getting Data:
// ======================================
/**
 * Implementation of hook_load()
 */
function wowguild_load($node) {
  $result = db_query(
      'SELECT dates, life, works FROM {wowguild} WHERE vid = %d',
      $node->vid
  );
  return db_fetch_object($result);
}
/**
 * Implementation of hook_view()
 */
function wowguild_view($node, $teaser=FALSE, $page=FALSE) {
  $node = node_prepare($node, $teaser); // get it ready for display

  $dates = check_plain($node->dates);
  $life = check_markup($node->life);
  $works = check_markup($node->works);

  // Add theme stuff here
  $node->content['wowguild_info'] = array(
      '#value' => theme('wowguild_info', $dates, $life, $works),
      '#weight' => 1,
  );

  return $node;
}

// ======================================
// Theme:
// ======================================

